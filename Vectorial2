#include <stdio.h>
#include <malloc.h>
#include <stdio.h>
#include <time.h>
#include <xmmintrin.h>
#include <emmintrin.h>
#define N 1000000

int calcular(__m128 a, __m128 b);

int main(int argc, char *argv[])
{
    __m128 a,b;

    char A[N] __attribute__((aligned(16)));
    char A2[N]__attribute__((aligned(16)));
    float B[N]__attribute__((aligned(16)));
    float B2[N]__attribute__((aligned(16)));
    int j;
    int i;

    // NO hago entrada ahora, solamente n√∫meros sin significado
    for(size_t i = 0; i < N; i++){
        A[i] = i % 120 + 1;
        B[i] = atof(&A[i]);
        if (i!=0)
        {
            A2[i-1]= (i-1) % 120 + 1;
            B2[i-1] = atof(&A2[i-1]);
        }
    }
       /* B[i+1]=0;
        B[i+2]=0;
        B[i+3]=0;
        B[i+4]=0;
        B2[i]=0;
        B2[i+1]=0;
        B2[i+2]=0;
        B2[i+3]=0;*/

     for(j=0; j<i; j+=4) {
        a = _mm_load_ps(&B[i]);
        b = _mm_load_ps(&B2[i]);
       }



    printf("%d\n", calcular(a,b));
    
    return 0;
}   
int calcular(__m128 a, __m128 b){
    __m128 tmp ,acc;
    acc = _mm_setzero_ps();
    for(size_t i = 0; i < N - 1; i++)
    {
       //char tmp = a[i] ^ a[i + 1];
       tmp  = _mm_xor_ps(a,b);
       //acc = acc + tmp;
       acc = _mm_add_ps(acc,tmp);
    }

        int rfinal = acc[0]+acc[1]+acc[2]+acc[3];
    return rfinal;
}
